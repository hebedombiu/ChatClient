// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<global::System.Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(11)
            {
                { typeof(global::Shared.Messages.ChatMessage[]), 0 },
                { typeof(global::Shared.Messages.UserStateNotify[]), 1 },
                { typeof(global::Shared.Messages.IMessage), 2 },
                { typeof(global::Shared.Messages.ChatMessage), 3 },
                { typeof(global::Shared.Messages.ChatUser), 4 },
                { typeof(global::Shared.Messages.ConnectRequest), 5 },
                { typeof(global::Shared.Messages.ConnectResponse), 6 },
                { typeof(global::Shared.Messages.IncomeMessageNotify), 7 },
                { typeof(global::Shared.Messages.SendMessageRequest), 8 },
                { typeof(global::Shared.Messages.SendMessageResponse), 9 },
                { typeof(global::Shared.Messages.UserStateNotify), 10 },
            };
        }

        internal static object GetFormatter(global::System.Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::Shared.Messages.ChatMessage>();
                case 1: return new global::MessagePack.Formatters.ArrayFormatter<global::Shared.Messages.UserStateNotify>();
                case 2: return new MessagePack.Formatters.Shared.Messages.IMessageFormatter();
                case 3: return new MessagePack.Formatters.Shared.Messages.ChatMessageFormatter();
                case 4: return new MessagePack.Formatters.Shared.Messages.ChatUserFormatter();
                case 5: return new MessagePack.Formatters.Shared.Messages.ConnectRequestFormatter();
                case 6: return new MessagePack.Formatters.Shared.Messages.ConnectResponseFormatter();
                case 7: return new MessagePack.Formatters.Shared.Messages.IncomeMessageNotifyFormatter();
                case 8: return new MessagePack.Formatters.Shared.Messages.SendMessageRequestFormatter();
                case 9: return new MessagePack.Formatters.Shared.Messages.SendMessageResponseFormatter();
                case 10: return new MessagePack.Formatters.Shared.Messages.UserStateNotifyFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1649 // File name should match first type name



// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Messages
{
    public sealed class IMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.IMessage>
    {
        private readonly global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>> typeToKeyAndJumpMap;
        private readonly global::System.Collections.Generic.Dictionary<int, int> keyToJumpMap;

        public IMessageFormatter()
        {
            this.typeToKeyAndJumpMap = new global::System.Collections.Generic.Dictionary<global::System.RuntimeTypeHandle, global::System.Collections.Generic.KeyValuePair<int, int>>(6, global::MessagePack.Internal.RuntimeTypeHandleEqualityComparer.Default)
            {
                { typeof(global::Shared.Messages.ConnectRequest).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(0, 0) },
                { typeof(global::Shared.Messages.ConnectResponse).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(1, 1) },
                { typeof(global::Shared.Messages.SendMessageRequest).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(2, 2) },
                { typeof(global::Shared.Messages.SendMessageResponse).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(3, 3) },
                { typeof(global::Shared.Messages.UserStateNotify).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(4, 4) },
                { typeof(global::Shared.Messages.IncomeMessageNotify).TypeHandle, new global::System.Collections.Generic.KeyValuePair<int, int>(5, 5) },
            };
            this.keyToJumpMap = new global::System.Collections.Generic.Dictionary<int, int>(6)
            {
                { 0, 0 },
                { 1, 1 },
                { 2, 2 },
                { 3, 3 },
                { 4, 4 },
                { 5, 5 },
            };
        }

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.IMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            global::System.Collections.Generic.KeyValuePair<int, int> keyValuePair;
            if (value != null && this.typeToKeyAndJumpMap.TryGetValue(value.GetType().TypeHandle, out keyValuePair))
            {
                writer.WriteArrayHeader(2);
                writer.WriteInt32(keyValuePair.Key);
                switch (keyValuePair.Value)
                {
                    case 0:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.ConnectRequest>().Serialize(ref writer, (global::Shared.Messages.ConnectRequest)value, options);
                        break;
                    case 1:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.ConnectResponse>().Serialize(ref writer, (global::Shared.Messages.ConnectResponse)value, options);
                        break;
                    case 2:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.SendMessageRequest>().Serialize(ref writer, (global::Shared.Messages.SendMessageRequest)value, options);
                        break;
                    case 3:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.SendMessageResponse>().Serialize(ref writer, (global::Shared.Messages.SendMessageResponse)value, options);
                        break;
                    case 4:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.UserStateNotify>().Serialize(ref writer, (global::Shared.Messages.UserStateNotify)value, options);
                        break;
                    case 5:
                        options.Resolver.GetFormatterWithVerify<global::Shared.Messages.IncomeMessageNotify>().Serialize(ref writer, (global::Shared.Messages.IncomeMessageNotify)value, options);
                        break;
                    default:
                        break;
                }

                return;
            }

            writer.WriteNil();
        }

        public global::Shared.Messages.IMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            if (reader.ReadArrayHeader() != 2)
            {
                throw new global::System.InvalidOperationException("Invalid Union data was detected. Type:global::Shared.Messages.IMessage");
            }

            options.Security.DepthStep(ref reader);
            var key = reader.ReadInt32();

            if (!this.keyToJumpMap.TryGetValue(key, out key))
            {
                key = -1;
            }

            global::Shared.Messages.IMessage result = null;
            switch (key)
            {
                case 0:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.ConnectRequest>().Deserialize(ref reader, options);
                    break;
                case 1:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.ConnectResponse>().Deserialize(ref reader, options);
                    break;
                case 2:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.SendMessageRequest>().Deserialize(ref reader, options);
                    break;
                case 3:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.SendMessageResponse>().Deserialize(ref reader, options);
                    break;
                case 4:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.UserStateNotify>().Deserialize(ref reader, options);
                    break;
                case 5:
                    result = (global::Shared.Messages.IMessage)options.Resolver.GetFormatterWithVerify<global::Shared.Messages.IncomeMessageNotify>().Deserialize(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }

            reader.Depth--;
            return result;
        }
    }


}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name


// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168
#pragma warning disable CS1591 // document public APIs

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Shared.Messages
{
    public sealed class ChatMessageFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.ChatMessage>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.ChatMessage value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(4);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Color, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
            writer.Write(value.Time);
        }

        public global::Shared.Messages.ChatMessage Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.ChatMessage();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Color = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Text = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.Time = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ChatUserFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.ChatUser>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.ChatUser value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.UserId, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Color, options);
        }

        public global::Shared.Messages.ChatUser Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.ChatUser();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.UserId = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Color = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ConnectRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.ConnectRequest>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.ConnectRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            writer.Write(value.Id);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Name, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Color, options);
        }

        public global::Shared.Messages.ConnectRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.ConnectRequest();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Name = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 2:
                        ____result.Color = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ConnectResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.ConnectResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.ConnectResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            writer.Write(value.Parent);
            writer.Write(value.IsSuccess);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Message, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.UserStateNotify[]>(formatterResolver).Serialize(ref writer, value.UserStates, options);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatMessage[]>(formatterResolver).Serialize(ref writer, value.Messages, options);
        }

        public global::Shared.Messages.ConnectResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.ConnectResponse();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Parent = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.IsSuccess = reader.ReadBoolean();
                        break;
                    case 2:
                        ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 3:
                        ____result.UserStates = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.UserStateNotify[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 4:
                        ____result.Messages = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatMessage[]>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class IncomeMessageNotifyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.IncomeMessageNotify>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.IncomeMessageNotify value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatMessage>(formatterResolver).Serialize(ref writer, value.Message, options);
        }

        public global::Shared.Messages.IncomeMessageNotify Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.IncomeMessageNotify();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Message = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatMessage>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SendMessageRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.SendMessageRequest>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.SendMessageRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.Id);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Serialize(ref writer, value.Text, options);
        }

        public global::Shared.Messages.SendMessageRequest Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.SendMessageRequest();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Id = reader.ReadInt32();
                        break;
                    case 1:
                        ____result.Text = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<string>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class SendMessageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.SendMessageResponse>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.SendMessageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            writer.WriteArrayHeader(1);
            writer.Write(value.Parent);
        }

        public global::Shared.Messages.SendMessageResponse Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.SendMessageResponse();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.Parent = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

    public sealed class UserStateNotifyFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Shared.Messages.UserStateNotify>
    {

        public void Serialize(ref global::MessagePack.MessagePackWriter writer, global::Shared.Messages.UserStateNotify value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatUser>(formatterResolver).Serialize(ref writer, value.User, options);
            writer.Write(value.IsOnline);
        }

        public global::Shared.Messages.UserStateNotify Deserialize(ref global::MessagePack.MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            global::MessagePack.IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var ____result = new global::Shared.Messages.UserStateNotify();

            for (int i = 0; i < length; i++)
            {
                switch (i)
                {
                    case 0:
                        ____result.User = global::MessagePack.FormatterResolverExtensions.GetFormatterWithVerify<global::Shared.Messages.ChatUser>(formatterResolver).Deserialize(ref reader, options);
                        break;
                    case 1:
                        ____result.IsOnline = reader.ReadBoolean();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            reader.Depth--;
            return ____result;
        }
    }

}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

